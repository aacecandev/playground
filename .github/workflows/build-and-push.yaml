name: "Build and push API"
on:
  push:
    tags:
      - "api-*.*.*"

env:
  REGISTRY: "docker.io"

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.13.1"

      - name: Get image tag and Dockerfile folder
        id: tag-folder
        ## Step variables explanation
        # REF_NAME=store-1.0.0
        # COMPONENT=store
        # IMAGE_TAG=1.0.0
        run: |
          REF_NAME=${{ github.ref_name }}
          COMPONENT=${REF_NAME%-*}
          TAG=${REF_NAME##*-}
          echo "COMPONENT=${COMPONENT}" >> ${GITHUB_OUTPUT}
          echo "TAG=${TAG}" >> ${GITHUB_OUTPUT}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Login to ghcr.io
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

            # "ghcr.io/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}"

      - name: Prepare Docker image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}
          flavor: latest=auto
          tags: |
            type=semver,pattern={{version}},value=${{ steps.tag-folder.outputs.TAG }}
          labels: |
            org.opencontainers.image.version=${{ steps.tag-folder.outputs.TAG }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ${{ steps.tag-folder.outputs.COMPONENT }}
          file: ${{ steps.tag-folder.outputs.COMPONENT }}/Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Write signing key to disk
      #   run: 'echo "$KEY" > cosign.key'
      #   shell: bash
      #   env:
      #     KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}

      # - name: Sign the published Docker image
      #   env:
      #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      #     # cosign sign --key cosign.key -a foo=bar ${{ env.REGISTRY }}/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}:${{ steps.tag-folder.outputs.TAG }}
      #   run:
      #     cosign sign --key cosign.key -a foo=bar ${{ env.REGISTRY }}/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}@${{ steps.build-and-push.outputs.digest }}

### This goes commented
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   env:
      #     COSIGN_EXPERIMENTAL: "true"
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: cosign sign ${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}@${{ steps.build-and-push.outputs.digest }}

      - name: Sign image with Cosign
        env:
          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}@${{ steps.build-and-push.outputs.digest }}

### This goes uncommented
      - name: Download Syft
        uses: anchore/sbom-action/download-syft@4d571ad1038a9cc29d676154ef265ab8f9027042 # v0.14.2
        with:
          syft-version: v0.72.0

      - name: Test
        run: |
          syft packages ${{ env.REGISTRY }}/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}@${{ steps.build-and-push.outputs.digest }}
          ls -la

      - name: Scan image with Grype
        id: scan
        uses: anchore/scan-action@v3
        with:
          sbom: ./sbom.syft.spdx.json

      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Upload SBoM to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.PAT }}
          file: ./sbom.syft.spdx.json
          asset_name: sbom.syft.spdx.json
          tag: ${{ github.ref }}
          overwrite: true
          # body: "This is my release text"

### This is the old workflow, it is not working anymore
      # - name: Publish SBoM
      #   uses: anchore/sbom-action/publish-sbom@v0
      #   with:
      #     sbom-artifact-match: "^sbom.syft.spdx.json$"

      # - name: SBoM16 alerts create and publish
      #   uses: anchore/sbom-action@54e36e45f34bc64728f51adb8044404daca492a6 # v0.13.2
      #   with:
      #     image: ${{ env.REGISTRY }}/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}@${{ steps.build-and-push.outputs.digest }}
      #     dependency-snapshot: true
      #     format: spdx-json
      #     artifact-name: sbom-syft-spdx.json
      #     output-file: sbom-syft-spdx.json

      # - name: Scan image with Grype
      #   uses: anchore/scan-action@v3
      #   with:
      #     sbom: ./sbom.syft.spdx.json

      # - name: Create SBoM attestation
      #   run: |
      #     cosign attest --yes --predicate ./sbom.syft.spdx.json --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}@${{ steps.build-and-push.outputs.digest }}
      #   env:
      #     COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
      #     COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      # - name: Create vulnerability report attestation
      #   run: |
      #     cosign attest --yes --predicate ./vulnerability-report.grype.json --key env://COSIGN_PRIVATE_KEY ${{ env.REGISTRY }}/${{ github.repository }}-${{ steps.tag-folder.outputs.COMPONENT }}@${{ steps.build-and-push.outputs.digest }}
      #   env:
      #     COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
      #     COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

# This steps has not been totally tested
  # create-sbom-and-scan:
  #   runs-on: ubuntu-22.04
  #   needs: build-and-push-image
  #   steps:
  #     - name: SBoM create and publish
  #       uses: anchore/sbom-action@v0
  #       with:
  #         image: konstellation/kdl-py:${{ needs.build-and-push-image.outputs.image_base_tag }}-${{ needs.build-and-push-image.outputs.image_tag }}
  #         output-file: ./sbom.syft.spdx.json

  #     - name: Upload SBoM artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: sbom.syft.spdx.json
  #         path: ./sbom.syft.spdx.json

  #     - name: Scan image with Grype
  #       uses: anchore/scan-action@v3
  #       with:
  #         sbom: ./sbom.syft.spdx.json

  #     - name: Upload vulnerability report artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: vulnerability-report.grype.json
  #         path: ./vulnerability-report.grype.json

  # attestation:
  #   runs-on: ubuntu-22.04
  #   needs: [create-sbom-and-scan, build-and-push-image]
  #   steps:
  #     - name: Download SBoM artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: sbom.syft.spdx.json
  #         path: ./sbom.syft.spdx.json

  #     - name: Download vulnerability report artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: vulnerability-report.grype.json
  #         path: ./vulnerability-report.grype.json

  #     - name: Install Cosign
  #       uses: sigstore/cosign-installer@main
  #       # with:
  #       #   cosign-release: "v2.8.1" # We don't know if this represents the cosign version or the cosign-installer version

  #     - name: Login to DockerHub Registry
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.docker_username }}
  #         password: ${{ secrets.docker_token }}

  #     - name: Create SBoM attestation
  #       run: |
  #         cosign attest --yes --predicate ./sbom.syft.spdx.json --key env://COSIGN_PRIVATE_KEY konstellation/kdl-py:${{ needs.build-and-push-image.outputs.image_base_tag }}
  #         cosign attest --yes --predicate ./sbom.syft.spdx.json --key env://COSIGN_PRIVATE_KEY konstellation/kdl-py:${{ needs.build-and-push-image.outputs.image_base_tag }}-${{ needs.build-and-push-image.outputs.image_tag }}
  #       env:
  #         COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
  #         COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

  #     - name: Upload attestation artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: cosign-attestation.json
  #         path: ./cosign-attestation.json

  #     - name: Create vulnerability report attestation
  #       run: |
  #         cosign attest --yes --predicate ./vulnerability-report.grype.json --key env://COSIGN_PRIVATE_KEY konstellation/kdl-py:${{ needs.build-and-push-image.outputs.image_base_tag }}
  #         cosign attest --yes --predicate ./vulnerability-report.grype.json --key env://COSIGN_PRIVATE_KEY konstellation/kdl-py:${{ needs.build-and-push-image.outputs.image_base_tag }}${{ needs.build-and-push-image.outputs.image_tag }}
  #       env:
  #         COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
  #         COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
